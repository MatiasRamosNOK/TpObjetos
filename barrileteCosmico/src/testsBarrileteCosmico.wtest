import example.*

describe "Test barrilete cosmico"{
	var garlicSea
	var silverSea
	var lastToninas
	var goodAirs
	var unAvion
	var unMicro
	var unTren
	var unBarco
	var viajeGaAS
	fixture{
		garlicSea = new Localidad(["CaÃ±a de Pescar", "Piloto"],2500,"Garlic's Sea", 100)
		silverSea = new Localidad(["ProtectorSolar","Equipo de Buceo"], 1350, "Silver's Sea", 200)
		lastToninas = new Localidad(["Vacuna Gripal", "Vacuna B", "Necronomicon"], 3500, "Last Toninas", 300)
		goodAirs = new Localidad(["Cerveza", "Protector Solar"], 1500, "Good Airs", 400)
		
	
		barrileteCosmico.agregarDestinos(garlicSea)
		barrileteCosmico.agregarDestinos(silverSea)
		barrileteCosmico.agregarDestinos(lastToninas)
		barrileteCosmico.agregarDestinos(goodAirs)
		
		unAvion = new Avion(2,2,[new Turbina(20),new Turbina(40),new Turbina(140)])
		unMicro = new Micro(2)
		unTren = new Tren(2)
		unBarco = new Barco(2,2)
		viajeGaAS = new Viaje(garlicSea,silverSea,unAvion)
	}
	
test "Obtener destinos mas importantes de Barrilete Cosmico" {

	assert.equals(#{garlicSea,lastToninas},barrileteCosmico.destinosImportantes())

}

test "Last Toninas y Silver Sea estan a 100km de distancia entre ellas" {
	assert.equals(100, calculadoraDeDistancia.distancia(lastToninas, silverSea))
}

test "Aplicar 25% de descuento a Last Toninas" 
{
	lastToninas.descuento(25)
	assert.equals(2625,lastToninas.precio())
}

test "Aplicar 25% de descuento a Last Toninas y agregar certificado de descuento"
{
	lastToninas.descuento(25)
	assert.that(lastToninas.equipaje().contains("Certificado de descuento"))
}

test "Averiguar si Silver's Sea es un destino peligroso"
{
	assert.notThat(silverSea.esPeligroso())
}

test "Aplicar descuento del 15% a todos los destino de Barrilete Cosmico"
{
	barrileteCosmico.aplicarDescuento(15)
	assert.equals(2125,garlicSea.precio())
	assert.equals(1147.5,silverSea.precio())
	assert.equals(2975,lastToninas.precio())
	assert.equals(1275,goodAirs.precio())
}

test "Obtener los destinos mas peligrosos hasta el momento"
{
	assert.equals(#{lastToninas},barrileteCosmico.destinos().filter({unDestino =>unDestino.esPeligroso()}))
}

test "Saber si barrilete cosmico es una empresa extrema"
{
	assert.that(barrileteCosmico.esExtrema())
}

test "Conocer la carta de destinos de Barrilete Cosmico"
{
	assert.that(["Garlic's Sea","Silver's Sea","Last Toninas","Good Airs"].all{unLugar => barrileteCosmico.nombresDeDestinos().contains(unLugar)})
}

test"Saber el precio de viajar desde Garlic's Sea a Silver's Sea"
{
	assert.equals(20000,viajeGaAS.costoDeViaje())
}

test "Saber la distancia recorrida del viaje entre Garlic's Sea y Silver's Sea"
{
	assert.equals(100,viajeGaAS.distanciaDeViaje())
}

test "El costo por KM de viajar en Avion es de 200"
{
	assert.equals(200, unAvion.precioPorKM())
}

test "El costo por KM de viajar en Micro es de 5000"{
	assert.equals(5000, unMicro.precioPorKM())
}



test "El costo por KM de viajar en Tren es de 1437"{
	assert.equals(1437, unTren.precioPorKM())
}



test "El costo por KM de viajar en Barco es de 1000"{
	assert.equals(2000, unBarco.precioPorKM())
}

}