import usuarios.*
import example.*
describe "Test usuarios" {
	var pHairi
	var garlicSea
	var silverSea
	var lastToninas
	var goodAirs
	var unTransporte
	var viajeGaAS
	var usuarioSinDinero
	fixture
	{
		garlicSea = new Localidad(["Ca√±a de Pescar", "Piloto"],2500,"Garlic's Sea", 100)
		silverSea = new Localidad(["ProtectorSolar","Equipo de Buceo"], 1350, "Silver's Sea", 200)
		lastToninas = new Localidad(["Vacuna Gripal", "Vacuna B", "Necronomicon"], 3500, "Last Toninas", 300)
		goodAirs = new Localidad(["Cerveza", "Protector Solar"], 500, "Good Airs", 400)
		unTransporte = new MedioDeTransporte(1,1)
		viajeGaAS = new Viaje(garlicSea,silverSea,unTransporte)
		pHairi = new Usuario([],1500,#{},garlicSea,unTransporte)
		usuarioSinDinero = new Usuario([],0,#{},garlicSea,unTransporte)
	}
	
test "Obtener las millas de PHari"
{
	pHairi.haceUnViaje(viajeGaAS)
	assert.equals(100,pHairi.kilometrosRecorridos())
}

test "Hacer que PHari vuele a Silver 's Sea. Puede viajar y contiene en su historial"
{
	assert.that(pHairi.puedePagarElViaje(viajeGaAS))
	pHairi.haceUnViaje(viajeGaAS)
	assert.that(pHairi.conoceViajes().contains(viajeGaAS))
}

test "Hacer que PHari vuele a Silver 's Sea. Le queda 1400 en su saldo"
{
	pHairi.haceUnViaje(viajeGaAS)
	assert.equals(1400,pHairi.saldo())
}

test "Hacer que PHari vuele a Silver's y su nueva ciudad sea Silver's Sea"
{
	pHairi.haceUnViaje(viajeGaAS)
	assert.equals(silverSea,pHairi.ciudadOrigen())
}

test "Hacer que PHairi vuele de lastToninas a Silver's Sea y saber su distancia recorrida"
{
	pHairi.haceUnViaje(viajeGaAS)
	assert.equals(100, pHairi.kilometrosRecorridos())
}

test "El usuario no puede hacer el viaje"
{
	assert.throwsExceptionWithMessage("No puede viajar,no posee suficiente saldo", {usuarioSinDinero.haceUnViaje(viajeGaAS)})
}
	
}